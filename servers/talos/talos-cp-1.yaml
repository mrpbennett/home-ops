version: v1alpha1 # Indicates the schema used to decode the contents.
debug: false # Enable verbose logging to the console.
persist: true
# Provides machine specific configuration options.
machine:
  type: controlplane # Defines the role of the machine within the cluster.
  token: 9podca.pbbvf4giemrrwrz8 # The `token` is used by a machine to join the PKI of the cluster.
  # The root certificate authority of the PKI.
  ca:
    crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJQakNCOGFBREFnRUNBaEJ6aWcxTTRhQld2K2RvM1lLLzVaeDFNQVVHQXl0bGNEQVFNUTR3REFZRFZRUUsKRXdWMFlXeHZjekFlRncweU5EQTJNVE13T0RNMU5UZGFGdzB6TkRBMk1URXdPRE0xTlRkYU1CQXhEakFNQmdOVgpCQW9UQlhSaGJHOXpNQ293QlFZREsyVndBeUVBYWxNdzR4bVMxUE5BdnJYUkJpdGlaU0hsRWUveS9ITVNQR0tsCmhRM2N2V0NqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDaERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVenh0Wlo1NGp3bjFWc2ZQOQpWVUdROWN1YWFqQXdCUVlESzJWd0EwRUF0UlFyWWVTSEllb2pmVkFYODNsVFBoRHRnOHlqOVdUK2oxdVAyWE13CkJRUkE0cWN5SHRETndIMy9JVzgvTWp1eEtqMHFvbEJVM0NEQkZZODM3Zys0QUE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    key: LS0tLS1CRUdJTiBFRDI1NTE5IFBSSVZBVEUgS0VZLS0tLS0KTUM0Q0FRQXdCUVlESzJWd0JDSUVJTFBQdjg0Tmt2RGQrVDJESHpXZW1iVW96V0dCTzVQODFZWmYrY3BUVTRuVgotLS0tLUVORCBFRDI1NTE5IFBSSVZBVEUgS0VZLS0tLS0K
  # Extra certificate subject alternative names for the machine's certificate.
  certSANs: []

  # Used to provide additional options to the kubelet.
  kubelet:
    image: ghcr.io/siderolabs/kubelet:v1.29.2 # The `image` field is an optional reference to an alternative kubelet image.
    defaultRuntimeSeccompProfileEnabled: true # Enable container runtime default Seccomp profile.
    disableManifestsDirectory: true # The `disableManifestsDirectory` field configures the kubelet to get static pod manifests from the /etc/kubernetes/manifests directory.

    # The `extraMounts` field is used to add additional mounts to the kubelet container.
    extraMounts:
      - destination: /var/mnt/storage # Destination is the absolute path where the mount will be placed in the container.
        type: bind # Type specifies the mount kind.
        source: /var/mnt/storage # Source specifies the source path of the mount.
        # Options are fstab style mount options.
        options:
          - bind
          - rshared
          - rw

  # Provides machine specific network configuration options.
  network:
    hostname: talos-cp-1
    nameservers:
      - 192.168.4.100
      - 1.1.1.1
    interfaces:
      - deviceSelector:
          busPath: "0*" # Single Network Interface
        addresses:
          - 192.168.5.1/22 # static IP
        routes:
          - network: 0.0.0.0/0
            gateway: 192.168.4.1
        vip:
          ip: 192.168.5.200 # Specifies the VIP address to be used.

  # Used to provide instructions for installations.
  install:
    disk: /dev/sda # The disk used for installations.
    image: ghcr.io/siderolabs/installer:v1.6.5 # Allows for supplying the image used to perform the installation.
    wipe: false # Indicates if the installation disk should be wiped at installation time.

  # Used to configure the machine's container image registry mirrors.
  registries:
    mirrors:
      personal_docker_registry:
        endpoints:
          - http://192.168.7.210:5000

    # Specifies TLS & auth configuration for HTTPS image registries.
    config:
      registry.insecure:
        tls:
          insecureSkipVerify: true

  # Features describe individual Talos features that can be switched on or off.
  features:
    rbac: true # Enable role-based access control (RBAC).
    stableHostname: true # Enable stable default hostname.
    apidCheckExtKeyUsage: true # Enable checks for extended key usage of client certificates in apid.
    diskQuotaSupport: true # Enable XFS project quota support for EPHEMERAL partition and user disks.
    # KubePrism - local proxy/load balancer on defined port that will distribute
    kubePrism:
      enabled: true # Enable KubePrism support - will start local load balacing proxy.
      port: 7445 # KubePrism port.

    # Configure Talos API access from Kubernetes pods.
    kubernetesTalosAPIAccess:
      enabled: true # Enable Talos API access from Kubernetes pods.
      # The list of Talos API roles which can be granted for access from Kubernetes pods.
      allowedRoles:
        - os:reader
      # The list of Kubernetes namespaces Talos API access is available from.
      allowedKubernetesNamespaces:
        - kube-system

  # MachineDisks list example.
  disks:
    - device: /dev/sdb # The name of the disk to use.
      partitions:
        - mountpoint: /var/mnt/storage # Where to mount the partition.

# Provides cluster specific configuration options.
cluster:
  id: TnZJctrL_fkAAsR-zpibsgsvF4qsHAZTa0_VC1FDpb0= # Globally unique identifier for this cluster (base64 encoded random 32 bytes).
  secret: 0PyX4919AcBjWtoZPmmwfZj7vMBaD0jmGFg8bw9xweg= # Shared secret of cluster (base64 encoded random 32 bytes).
  # Provides control plane specific configuration options.
  controlPlane:
    endpoint: https://192.168.5.200:6443 # Endpoint is the canonical controlplane endpoint, which can be an IP address or a DNS hostname.
  clusterName: talos-cluster # Configures the cluster's name.
  # Provides cluster specific network configuration options.
  network:
    dnsDomain: cluster.local # The domain used by Kubernetes DNS.
    # The pod subnet CIDR.
    podSubnets:
      - 10.244.0.0/16
    # The service subnet CIDR.
    serviceSubnets:
      - 10.96.0.0/12

  token: e2qa2d.lv3q00uhm3ilp3ds # The [bootstrap token](https://kubernetes.io/docs/reference/access-authn-authz/bootstrap-tokens/) used to join the cluster.
  secretboxEncryptionSecret: uQr78QSsGIl/4pKCzJD1i8YGlM4FNJq6veehTDFxa8I= # A key used for the [encryption of secret data at rest](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/).
  # The base64 encoded root certificate authority used by Kubernetes.
  ca:
    crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJpVENDQVMrZ0F3SUJBZ0lRQnFkNThpMVl2UDUrSXRHVGszYkk2REFLQmdncWhrak9QUVFEQWpBVk1STXcKRVFZRFZRUUtFd3ByZFdKbGNtNWxkR1Z6TUI0WERUSTBNRFl4TXpBNE16VTFOMW9YRFRNME1EWXhNVEE0TXpVMQpOMW93RlRFVE1CRUdBMVVFQ2hNS2EzVmlaWEp1WlhSbGN6QlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VICkEwSUFCQ1pKeXd3bWp6NXpGeU9XUml6akdzNENHdWRYUkVLeGhodmlPYzlLS0hnV1E2M1FJdjlGaHhLVFRHaE0Kd3ZOR1Q0ejlIYThGSGp1Z2RsdUdBU0o5T1RPallUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ2hEQWRCZ05WSFNVRQpGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFCkZnUVVEVzZ0Z29sS3dsVGgyaWxNSUlJKzgwWEF4SWN3Q2dZSUtvWkl6ajBFQXdJRFNBQXdSUUloQU10MEhSV3AKblZEbEQ1a3JBMnZHQzVldG5NNjJpYlZNMjJWMXdtSXBXb0tjQWlBYXJCeVEvbmVoNnlKUFpVNSsrNVJ6My9qZwp3OHlTV2tyZDBhaDBPV3JxWmc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUR5OWExVkkxblV6ekhCclNRS3dQbXhPTitSQ3hEUFI0S3VlaE1oWXJ6VXhvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFSmtuTERDYVBQbk1YSTVaR0xPTWF6Z0lhNTFkRVFyR0dHK0k1ejBvb2VCWkRyZEFpLzBXSApFcE5NYUV6QzgwWlBqUDBkcndVZU82QjJXNFlCSW4wNU13PT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
  # The base64 encoded aggregator certificate authority used by Kubernetes for front-proxy certificate generation.
  aggregatorCA:
    crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJZRENDQVFXZ0F3SUJBZ0lRYThyblAxYVQrTU5YNjRNWjV6bGw5VEFLQmdncWhrak9QUVFEQWpBQU1CNFgKRFRJME1EWXhNekE0TXpVMU4xb1hEVE0wTURZeE1UQTRNelUxTjFvd0FEQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxRwpTTTQ5QXdFSEEwSUFCSkI5NUFWR2pJNndNNkhTZlIvcHdBSHVTNEN5Wkh1YWEyWmhFY1lzbHRFMSsxZnB4d2dkCjBicGhOUzgxL1M2QVlZbTI3QmxqMVNrMVJHd2R0d1lVOWVxallUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ2hEQWQKQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZApCZ05WSFE0RUZnUVVwSUpOUjRkQVA3S0cyOGwvTWU3Ky92WWtGN0l3Q2dZSUtvWkl6ajBFQXdJRFNRQXdSZ0loCkFPbTM1eG5XMkVXTHZZZXhVT1c3dG9wa2J6TzFvYmpoc01GUEhjQnJ3cWozQWlFQWg0YThnUmNQT2ljUmlnNisKcVdkT29GL1l4cXJXT1FQNkR0UGxCUUpEQkpFPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSU5tSXZKQ0p6bnBFM0pHZU54ZFNMSjJseU1XS3RvL2hmRzJvcFN0VWhwck5vQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFa0gza0JVYU1qckF6b2RKOUgrbkFBZTVMZ0xKa2U1cHJabUVSeGl5VzBUWDdWK25IQ0IzUgp1bUUxTHpYOUxvQmhpYmJzR1dQVktUVkViQjIzQmhUMTZnPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
  # The base64 encoded private key for service account token generation.
  serviceAccount:
    key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUZEemF0ZmFwVi9uMVg4V3h6WlZiekV0M3l6V2p1MDh3VEhzS1JpWFFjMWxvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFZGlMNVJPVldNUGM5SVdMZjVXcUNEUm1pS21PcG9Od3orZ2NJRXEyRFB2K1ZmMXhWMWNtNQpSTVl6b3BzdCtqaDVVaURUNGZlNW1UOUZEWjIvVWNMcVJ3PT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
  # API server specific configuration options.
  apiServer:
    image: registry.k8s.io/kube-apiserver:v1.29.2 # The container image used in the API server manifest.
    # Extra certificate subject alternative names for the API server's certificate.
    certSANs:
      - 192.168.5.200
    disablePodSecurityPolicy: true # Disable PodSecurityPolicy in the API server and default manifests.
    # Configure the API server admission plugins.
    admissionControl:
      - name: PodSecurity # Name is the name of the admission controller.
        # Configuration is an embedded configuration object to be used as the plugin's
        configuration:
          apiVersion: pod-security.admission.config.k8s.io/v1alpha1
          defaults:
            audit: restricted
            audit-version: latest
            enforce: baseline
            enforce-version: latest
            warn: restricted
            warn-version: latest
          exemptions:
            namespaces:
              - kube-system
            runtimeClasses: []
            usernames: []
          kind: PodSecurityConfiguration
    # Configure the API server audit policy.
    auditPolicy:
      apiVersion: audit.k8s.io/v1
      kind: Policy
      rules:
        - level: Metadata
  # Controller manager server specific configuration options.
  controllerManager:
    image: registry.k8s.io/kube-controller-manager:v1.29.2 # The container image used in the controller manager manifest.
  # Kube-proxy server-specific configuration options
  proxy:
    image: registry.k8s.io/kube-proxy:v1.29.2 # The container image used in the kube-proxy manifest.

  # Scheduler server specific configuration options.
  scheduler:
    image: registry.k8s.io/kube-scheduler:v1.29.2 # The container image used in the scheduler manifest.
  # Configures cluster member discovery.
  discovery:
    enabled: true # Enable the cluster membership discovery feature.
    # Configure registries used for cluster member discovery.
    registries:
      # Kubernetes registry uses Kubernetes API server to discover cluster members and stores additional information
      kubernetes:
        disabled: true # Disable Kubernetes discovery registry.

  # Etcd specific configuration options.
  etcd:
    # The `ca` is the root certificate authority of the PKI.
    ca:
      crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJmakNDQVNTZ0F3SUJBZ0lSQUtXYitkMDVQdzFkcUhxV2RIck5uS013Q2dZSUtvWkl6ajBFQXdJd0R6RU4KTUFzR0ExVUVDaE1FWlhSalpEQWVGdzB5TkRBMk1UTXdPRE0xTlRkYUZ3MHpOREEyTVRFd09ETTFOVGRhTUE4eApEVEFMQmdOVkJBb1RCR1YwWTJRd1dUQVRCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFSNG9mMkROQmc4ClhWZi9aUytVVkVZb3Jya1RIeGhWUktId015Nmlka0dTNkF2cDVRWkQyd1JUb2c5dkRQU0RJNmhnSFRhQWw3Z1MKMlRnaEUwMTZDYlBqbzJFd1h6QU9CZ05WSFE4QkFmOEVCQU1DQW9Rd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSApBd0VHQ0NzR0FRVUZCd01DTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkNCMkJmSjNqMExjClFlTExLeW9xMUhwTlptWTNNQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJQ1pzUmhFb1p4NEpMcVZFcEVWOEY2cC8KS00zSFpYR25WL0d2ZHNOOThnNENBaUVBOUNYczBkTmprNFBhY0N3a2pNOXpEU2U0MXBFYXVCYWhiUi8vZDdJNwpMRm89Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
      key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSURzYllqb2hSTWE2U01ocHgwMDlrak1LTm1UNVpQRGVlcFpUeE5QbGhjT2hvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFZUtIOWd6UVlQRjFYLzJVdmxGUkdLSzY1RXg4WVZVU2g4RE11b25aQmt1Z0w2ZVVHUTlzRQpVNklQYnd6MGd5T29ZQjAyZ0plNEV0azRJUk5OZWdtejR3PT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=

  externalCloudProvider:
    enabled: true
    manifests:
      - https://raw.githubusercontent.com/mrpbennett/home-ops/main/kubernetes/cluster/cluster-role-binding.yaml

version: v1alpha1 # Indicates the schema used to decode the contents.
debug: false # Enable verbose logging to the console.
persist: true
# Provides machine specific configuration options.
machine:
  type: controlplane # Defines the role of the machine within the cluster.
  token: uttwcy.0zfr5ugoe1fs1gtv # The `token` is used by a machine to join the PKI of the cluster.
  # The root certificate authority of the PKI.
  ca:
    crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJQakNCOGFBREFnRUNBaEE1RFdJSC84Zm5DNTBxVDBtcDh3U0dNQVVHQXl0bGNEQVFNUTR3REFZRFZRUUsKRXdWMFlXeHZjekFlRncweU5EQTFNekF4TXpRM05UaGFGdzB6TkRBMU1qZ3hNelEzTlRoYU1CQXhEakFNQmdOVgpCQW9UQlhSaGJHOXpNQ293QlFZREsyVndBeUVBNDNNbmlJUDNaWmQ5dk9zRkhYbnY2VFBNYjZWZmt1QVY2RzFBCkR6d1ZKSW1qWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDaERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVRGE4eHorblVCQi9lcnJOSQoxMUdpYlNnZnJ5RXdCUVlESzJWd0EwRUEyeUNrcE5ROFRnNjZENlExS3FkTmc1bDQwZ0ZzekFnSDBTckxYV29GCjM5YUNEd1JUaEN5RUZ4RXU0RWFUVVpRejhYTFBTdzVBWFpudnNLcGVBbU5KQnc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    key: LS0tLS1CRUdJTiBFRDI1NTE5IFBSSVZBVEUgS0VZLS0tLS0KTUM0Q0FRQXdCUVlESzJWd0JDSUVJTEdrL3pLa0V5Q1o5RU1JanltQW4wMGJDL0lXa2Y3TjFqL2ZMeVRYMG9VcQotLS0tLUVORCBFRDI1NTE5IFBSSVZBVEUgS0VZLS0tLS0K
  # Extra certificate subject alternative names for the machine's certificate.
  certSANs: []
  #   # Uncomment this to enable SANs.
  #   - 10.0.0.10
  #   - 172.16.0.10
  #   - 192.168.0.10

  # Used to provide additional options to the kubelet.
  kubelet:
    image: ghcr.io/siderolabs/kubelet:v1.29.2 # The `image` field is an optional reference to an alternative kubelet image.
    defaultRuntimeSeccompProfileEnabled: true # Enable container runtime default Seccomp profile.
    disableManifestsDirectory: true # The `disableManifestsDirectory` field configures the kubelet to get static pod manifests from the /etc/kubernetes/manifests directory.

    # The `extraMounts` field is used to add additional mounts to the kubelet container.
    extraMounts:
      - destination: /var/mnt/storage # Destination is the absolute path where the mount will be placed in the container.
        type: bind # Type specifies the mount kind.
        source: /var/mnt/storage # Source specifies the source path of the mount.
        # Options are fstab style mount options.
        options:
          - bind
          - rshared
          - rw

  # Provides machine specific network configuration options.
  # Provides machine specific network configuration options.
  network:
    hostname: talos-cp-2
    nameservers:
      - 192.168.4.100
      - 1.1.1.1
    interfaces:
      - deviceSelector:
          busPath: "0*" # Single Network Interface
        addresses:
          - 192.168.5.2/22 # static IP
        routes:
          - network: 0.0.0.0/0
            gateway: 192.168.4.1
        vip:
          ip: 192.168.5.200 # Specifies the VIP address to be used.
  time:
    servers:
      - time.cloudflare.com

  # Used to provide instructions for installations.
  install:
    disk: /dev/sda # The disk used for installations.
    image: ghcr.io/siderolabs/installer:v1.6.5 # Allows for supplying the image used to perform the installation.
    wipe: false # Indicates if the installation disk should be wiped at installation time.

  # Used to configure the machine's container image registry mirrors.
  registries: {}

  # Features describe individual Talos features that can be switched on or off.
  features:
    rbac: true # Enable role-based access control (RBAC).
    stableHostname: true # Enable stable default hostname.
    apidCheckExtKeyUsage: true # Enable checks for extended key usage of client certificates in apid.
    diskQuotaSupport: true # Enable XFS project quota support for EPHEMERAL partition and user disks.
    # KubePrism - local proxy/load balancer on defined port that will distribute
    kubePrism:
      enabled: true # Enable KubePrism support - will start local load balacing proxy.
      port: 7445 # KubePrism port.

  # MachineDisks list example.
  disks:
    - device: /dev/sdb # The name of the disk to use.
      # A list of partitions to create on the disk.
      partitions:
        - mountpoint: /var/mnt/storage # Where to mount the partition.

# Provides cluster specific configuration options.
cluster:
  id: 2ETEs9u586yImZLTS1Jgu2rJ-XiD4LQB8f9TSNluFEY= # Globally unique identifier for this cluster (base64 encoded random 32 bytes).
  secret: aAGpT8uo+XChWlv/54znm6IwPhGQcVbid6KWwkO5/Cw= # Shared secret of cluster (base64 encoded random 32 bytes).
  # Provides control plane specific configuration options.
  controlPlane:
    endpoint: https://192.168.5.200:6443 # Endpoint is the canonical controlplane endpoint, which can be an IP address or a DNS hostname.
  clusterName: talos-cluster # Configures the cluster's name.
  # Provides cluster specific network configuration options.
  network:
    dnsDomain: cluster.local # The domain used by Kubernetes DNS.
    # The pod subnet CIDR.
    podSubnets:
      - 10.244.0.0/16
    # The service subnet CIDR.
    serviceSubnets:
      - 10.96.0.0/12

    # # The CNI used.
    # cni:
    #     name: custom # Name of CNI to use.
    #     # URLs containing manifests to apply for the CNI.
    #     urls:
    #         - https://docs.projectcalico.org/archive/v3.20/manifests/canal.yaml
  token: jwidfx.74hl802ux7l2w7m3 # The [bootstrap token](https://kubernetes.io/docs/reference/access-authn-authz/bootstrap-tokens/) used to join the cluster.
  secretboxEncryptionSecret: VBXPjhWUzp5guUN5VSk6Jyv/S/1hyz8CW32X34Sun+A= # A key used for the [encryption of secret data at rest](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/).
  # The base64 encoded root certificate authority used by Kubernetes.
  ca:
    crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJpVENDQVMrZ0F3SUJBZ0lRSCs1UThaV2MvTmFwNE1hc0EzQTBMakFLQmdncWhrak9QUVFEQWpBVk1STXcKRVFZRFZRUUtFd3ByZFdKbGNtNWxkR1Z6TUI0WERUSTBNRFV6TURFek5EYzFPRm9YRFRNME1EVXlPREV6TkRjMQpPRm93RlRFVE1CRUdBMVVFQ2hNS2EzVmlaWEp1WlhSbGN6QlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VICkEwSUFCT1RLWWFxeWRWalNkM1pEYXZaY1JyT0hmWHJqaXc5Y3ltc25YNG9xY01za2xGYUkyUXliTEdFN0sxbm0KUlpzUGplbzkremhsUGk2RlZ5WFh3MEZsUVNPallUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ2hEQWRCZ05WSFNVRQpGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFCkZnUVVFd0Q1SHZTc1ZpdVRXQWVFZVJpNjR2dEU3Rmt3Q2dZSUtvWkl6ajBFQXdJRFNBQXdSUUlnU2k1OVZKRDYKMVRTMFFxYzBmZG96Z0xtSTNNaXRpcVg5VFdhWWhvUSt2YVFDSVFDM2V4T3BhZHN5ZlFrOU1EL2h2VG1UM2VONQozWXpsSnJQRWdzWi91WVl5Rmc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUd6VnVKMG9xcVJWaXZmekxsVTl2SzFVN0NITzYrdlo5VWJaZEY3YkM0ajFvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFNU1waHFySjFXTkozZGtOcTlseEdzNGQ5ZXVPTEQxektheWRmaWlwd3l5U1VWb2paREpzcwpZVHNyV2VaRm13K042ajM3T0dVK0xvVlhKZGZEUVdWQkl3PT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
  # The base64 encoded aggregator certificate authority used by Kubernetes for front-proxy certificate generation.
  aggregatorCA:
    crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJZRENDQVFhZ0F3SUJBZ0lSQUlxSnpLdWFxSGoxRmdrOFBpSzJxRWd3Q2dZSUtvWkl6ajBFQXdJd0FEQWUKRncweU5EQTFNekF4TXpRM05UaGFGdzB6TkRBMU1qZ3hNelEzTlRoYU1BQXdXVEFUQmdjcWhrak9QUUlCQmdncQpoa2pPUFFNQkJ3TkNBQVNUNTdsY0tITi9DdWQwdTJSaVlsZ1dMRDZWOGExRmRSZGlieStzS056MWlmaGhjMVlICndub1NWVm5xcmdqd3RTaGlETnc5amd6aEJNK0hONEsyUHhscG8yRXdYekFPQmdOVkhROEJBZjhFQkFNQ0FvUXcKSFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUZNQU1CQWY4dwpIUVlEVlIwT0JCWUVGQ2J2MkpIbEVscDl4Si9kRUpQeFJnbitoUTNHTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDCklHMC9SblZGWVZPUUpNU0lidi9WUWIrL2dqMGEwd0F1akZoVlZTTjNGVXJQQWlFQWppNFFYbTYwL3J2RnZZNEsKclJhd3NacHJWVk9HZkhuUkhNeWVvUzloSmJVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUNjL3RESUNsbnRoS3N6eUJDbUlXbEpwSUZwaUI0TENXdy9WZk9NbnllcUVvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFaytlNVhDaHpmd3JuZEx0a1ltSllGaXcrbGZHdFJYVVhZbTh2ckNqYzlZbjRZWE5XQjhKNgpFbFZaNnE0SThMVW9ZZ3pjUFk0TTRRVFBoemVDdGo4WmFRPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
  # The base64 encoded private key for service account token generation.
  serviceAccount:
    key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUJjbXREZkVacFRGUDNOVTFVUi9HUjkrYTVjQXZSQkwzOEx0QTMzQnNmcGFvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFWXpkNHJsUTNiL2wwN3F0N0pBNkdJSXF2Y0pjSldkRDE2amNhN1RmV1ppNk5kNFQyVzFQVwpmOWdjRHNNWWROWHZUUSt2Njg5cE1aRGpQYm9kajh4VUNnPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
  # API server specific configuration options.
  apiServer:
    image: registry.k8s.io/kube-apiserver:v1.29.2 # The container image used in the API server manifest.
    # Extra certificate subject alternative names for the API server's certificate.
    certSANs:
      - 192.168.5.200
    disablePodSecurityPolicy: true # Disable PodSecurityPolicy in the API server and default manifests.
    # Configure the API server admission plugins.
    admissionControl:
      - name: PodSecurity # Name is the name of the admission controller.
        # Configuration is an embedded configuration object to be used as the plugin's
        configuration:
          apiVersion: pod-security.admission.config.k8s.io/v1alpha1
          defaults:
            audit: restricted
            audit-version: latest
            enforce: baseline
            enforce-version: latest
            warn: restricted
            warn-version: latest
          exemptions:
            namespaces:
              - kube-system
            runtimeClasses: []
            usernames: []
          kind: PodSecurityConfiguration
    # Configure the API server audit policy.
    auditPolicy:
      apiVersion: audit.k8s.io/v1
      kind: Policy
      rules:
        - level: Metadata
  # Controller manager server specific configuration options.
  controllerManager:
    image: registry.k8s.io/kube-controller-manager:v1.29.2 # The container image used in the controller manager manifest.
  # Kube-proxy server-specific configuration options
  proxy:
    image: registry.k8s.io/kube-proxy:v1.29.2 # The container image used in the kube-proxy manifest.

    # # Disable kube-proxy deployment on cluster bootstrap.
    # disabled: false
  # Scheduler server specific configuration options.
  scheduler:
    image: registry.k8s.io/kube-scheduler:v1.29.2 # The container image used in the scheduler manifest.
  # Configures cluster member discovery.
  discovery:
    enabled: true # Enable the cluster membership discovery feature.
    # Configure registries used for cluster member discovery.
    registries:
      # Kubernetes registry uses Kubernetes API server to discover cluster members and stores additional information
      kubernetes:
        disabled: true # Disable Kubernetes discovery registry.
      # Service registry is using an external service to push and pull information about cluster members.
      service: {}
      # # External service endpoint.
      # endpoint: https://discovery.talos.dev/
  # Etcd specific configuration options.
  etcd:
    # The `ca` is the root certificate authority of the PKI.
    ca:
      crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJmakNDQVNPZ0F3SUJBZ0lRV2VtQ2lDcGxZOUdYdEVDVWV3NkxkREFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1JsZEdOa01CNFhEVEkwTURVek1ERXpORGMxT0ZvWERUTTBNRFV5T0RFek5EYzFPRm93RHpFTgpNQXNHQTFVRUNoTUVaWFJqWkRCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQkRKdkRvZ1dCK00zCmdabUZoTndUcVkvZ0EwU250MFg5amZEY3M2bUx6M3RLSE5TaGc5bWcrbE4rcDQ4cGM2ZW9qUGlXeWhQZldkdHcKZEFZcG80OG1TYVdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDaERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjRApBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVTzVBQXBxbWExRDhFClZkMXZBMGRFcS9rYTBac3dDZ1lJS29aSXpqMEVBd0lEU1FBd1JnSWhBTUdrSCtUU01iMG90RHN2MGRjKzVmNTIKdENGVTJPMG5UZVZuOWFCbHBsbmtBaUVBeDRVME5FdGhZTHdhWFdxVkwweFFTWkJtbnFWZHNOK3paNkc1bURxSQp1bkk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
      key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSU54NmZwaUZxUnhYZ1lEeHcxOUlINjkwNTc5cDkvYkgyWVVaOXZuTUFpYXhvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFTW04T2lCWUg0emVCbVlXRTNCT3BqK0FEUktlM1JmMk44Tnl6cVl2UGUwb2MxS0dEMmFENgpVMzZuanlsenA2aU0rSmJLRTk5WjIzQjBCaW1qanlaSnBRPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=

  # A list of urls that point to additional manifests.
  extraManifests:
    [
      https://raw.githubusercontent.com/mrpbennett/home-ops/main/kubernetes/cluster/cluster-role-binding.yaml,
    ]

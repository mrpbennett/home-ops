apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: eck-stack
  namespace: argocd
spec:
  destination:
    server: "https://kubernetes.default.svc"
    namespace: elastic-stack
  project: default
  source:
    chart: eck-stack
    repoURL: https://helm.elastic.co
    targetRevision: 0.15.0
    helm:
      valuesObject:
        eck-elasticsearch:
          nodeSets:
            - name: masters
              count: 1
              config:
                node.roles: ["master"]
                # Comment out when setting the vm.max_map_count via initContainer, as these are mutually exclusive.
                # For production workloads, it is strongly recommended to increase the kernel setting vm.max_map_count to 262144
                # and leave node.store.allow_mmap unset.
                # ref: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-virtual-memory.html
                #
                node.store.allow_mmap: false
              podTemplate:
                spec:
                  containers:
                    - name: elasticsearch
                      resources:
                        limits:
                          memory: 8Gi
                          cpu: 2
                  # Affinity/Anti-affinity settings for controlling the 'spreading' of Elasticsearch
                  # pods across existing hosts.
                  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
                  # ref: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-advanced-node-scheduling.html#k8s-affinity-options
                  #
                  # affinity:
                  #   nodeAffinity:
                  #     requiredDuringSchedulingIgnoredDuringExecution:
                  #       nodeSelectorTerms:
                  #       - matchExpressions:
                  #         - key: beta.kubernetes.io/instance-type
                  #           operator: In
                  #           # This should be adjusted to the instance type according to your setup
                  #           #
                  #           values:
                  #           - highio
              # Volume Claim settings.
              # ref: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-volume-claim-templates.html
              #
              volumeClaimTemplates:
                - metadata:
                    name: elasticsearch-data
                  spec:
                    accessModes:
                      - ReadWriteOnce
                    resources:
                      requests:
                        storage: 1Ti
                    # Adjust to your storage class name
                    #
                    # storageClassName: local-storage
            - name: hot
              count: 1
              config:
                node.roles: ["data_hot", "data_content", "ingest"]
                # Comment out when setting the vm.max_map_count via initContainer, as these are mutually exclusive.
                # For production workloads, it is strongly recommended to increase the kernel setting vm.max_map_count to 262144
                # and leave node.store.allow_mmap unset.
                # ref: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-virtual-memory.html
                #
                node.store.allow_mmap: false
              podTemplate:
                spec:
                  containers:
                    - name: elasticsearch
                      resources:
                        limits:
                          memory: 16Gi
                          cpu: 4
                  # Affinity/Anti-affinity settings for controlling the 'spreading' of Elasticsearch
                  # pods across existing hosts.
                  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
                  # ref: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-advanced-node-scheduling.html#k8s-affinity-options
                  #
                  # affinity:
                  #   nodeAffinity:
                  #     requiredDuringSchedulingIgnoredDuringExecution:
                  #       nodeSelectorTerms:
                  #       - matchExpressions:
                  #         - key: beta.kubernetes.io/instance-type
                  #           operator: In
                  #           # This should be adjusted to the instance type according to your setup
                  #           #
                  #           values:
                  #           - highio
              # Volume Claim settings.
              # ref: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-volume-claim-templates.html
              #
              volumeClaimTemplates:
                - metadata:
                    name: elasticsearch-data
                  spec:
                    accessModes:
                      - ReadWriteOnce
                    resources:
                      requests:
                        storage: 1Ti
                    # Adjust to your storage class name
                    #
                    # storageClassName: local-storage
            - name: warm
              count: 1
              config:
                node.roles: ["data_warm"]
                # Comment out when setting the vm.max_map_count via initContainer, as these are mutually exclusive.
                # For production workloads, it is strongly recommended to increase the kernel setting vm.max_map_count to 262144
                # and leave node.store.allow_mmap unset.
                # ref: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-virtual-memory.html
                #
                node.store.allow_mmap: false
              podTemplate:
                spec:
                  containers:
                    - name: elasticsearch
                      resources:
                        limits:
                          memory: 16Gi
                          cpu: 2
                  # Affinity/Anti-affinity settings for controlling the 'spreading' of Elasticsearch
                  # pods across existing hosts.
                  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
                  # ref: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-advanced-node-scheduling.html#k8s-affinity-options
                  #
                  # affinity:
                  #   nodeAffinity:
                  #     requiredDuringSchedulingIgnoredDuringExecution:
                  #       nodeSelectorTerms:
                  #       - matchExpressions:
                  #         - key: beta.kubernetes.io/instance-type
                  #           operator: In
                  #           # This should be adjusted to the instance type according to your setup
                  #           #
                  #           values:
                  #           - highstorage
              # Volume Claim settings.
              # ref: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-volume-claim-templates.html
              #
              volumeClaimTemplates:
                - metadata:
                    name: elasticsearch-data
                  spec:
                    accessModes:
                      - ReadWriteOnce
                    resources:
                      requests:
                        storage: 10Ti
                    # Adjust to your storage class name
                    #
                    # storageClassName: local-storage
            - name: cold
              count: 1
              config:
                node.roles: ["data_cold"]
                # Comment out when setting the vm.max_map_count via initContainer, as these are mutually exclusive.
                # For production workloads, it is strongly recommended to increase the kernel setting vm.max_map_count to 262144
                # and leave node.store.allow_mmap unset.
                # ref: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-virtual-memory.html
                #
                node.store.allow_mmap: false
              podTemplate:
                spec:
                  containers:
                    - name: elasticsearch
                      resources:
                        limits:
                          memory: 8Gi
                          cpu: 2
                  # Affinity/Anti-affinity settings for controlling the 'spreading' of Elasticsearch
                  # pods across existing hosts.
                  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
                  # ref: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-advanced-node-scheduling.html#k8s-affinity-options
                  #
                  # affinity:
                  #   nodeAffinity:
                  #     requiredDuringSchedulingIgnoredDuringExecution:
                  #       nodeSelectorTerms:
                  #       - matchExpressions:
                  #         - key: beta.kubernetes.io/instance-type
                  #           operator: In
                  #           # This should be adjusted to the instance type according to your setup
                  #           #
                  #           values:
                  #           - highstorage
              # Volume Claim settings.
              # ref: https://www.elastic.co/guide/en/cloud-on-k8s/current/k8s-volume-claim-templates.html
              #
              volumeClaimTemplates:
                - metadata:
                    name: elasticsearch-data
                  spec:
                    accessModes:
                      - ReadWriteOnce
                    resources:
                      requests:
                        storage: 20Ti
                    # Adjust to your storage class name
                    #
                    # storageClassName: local-storage

          ingress:
            enabled: true
            hosts:
              - host: elasticsearch.home.local
                path: /

        eck-kibana:
          # Count of Kibana replicas to create.
          #
          count: 1

          # Reference to ECK-managed Elasticsearch resource, ideally from {{ "elasticsearch.fullname" }}
          #
          elasticsearchRef:
            name: eck-stack-eck-elasticsearch
            # namespace: default
          http:
            service:
              spec:
                # Type of service to deploy for Kibana.
                # This deploys a load balancer in a cloud service provider, where supported.
                #
                type: LoadBalancer
            # tls:
            #   selfSignedCertificate:
            #     subjectAltNames:
            #     - ip: 1.2.3.4
            #     - dns: kibana.example.com

          ingress:
            enabled: true
            hosts:
              - host: kibana.home.local
                path: /
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true

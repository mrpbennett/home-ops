apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kube-prometheus-stack
  namespace: argocd
  annotations:
    argocd.argoproj.io/compare-options: ServerSideDiff=true
spec:
  destination:
    server: "https://kubernetes.default.svc"
    namespace: monitoring
  project: default
  source:
    chart: kube-prometheus-stack
    repoURL: https://prometheus-community.github.io/helm-charts
    targetRevision: 61.7.1
    helm:
      valuesObject:
        namespaceOverride: "monitoring"

        crds:
          enabled: true

        ## Create default rules for monitoring the cluster
        defaultRules:
          create: true
          rules:
            alertmanager: true
            etcd: true
            configReloaders: true
            general: true
            k8sContainerCpuUsageSecondsTotal: true
            k8sContainerMemoryCache: true
            k8sContainerMemoryRss: true
            k8sContainerMemorySwap: true
            k8sContainerResource: true
            k8sContainerMemoryWorkingSetBytes: true
            k8sPodOwner: true
            kubeApiserverAvailability: true
            kubeApiserverBurnrate: true
            kubeApiserverHistogram: true
            kubeApiserverSlos: true
            kubeControllerManager: true
            kubelet: true
            kubeProxy: true
            kubePrometheusGeneral: true
            kubePrometheusNodeRecording: true
            kubernetesApps: true
            kubernetesResources: true
            kubernetesStorage: true
            kubernetesSystem: true
            kubeSchedulerAlerting: true
            kubeSchedulerRecording: true
            kubeStateMetrics: true
            network: true
            node: true
            nodeExporterAlerting: true
            nodeExporterRecording: true
            prometheus: true
            prometheusOperator: true
            windows: true

          ## Additional labels for specific PrometheusRule alert groups
          additionalRuleGroupLabels:
            alertmanager: {}
            etcd: {}
            configReloaders: {}
            general: {}
            k8sContainerCpuUsageSecondsTotal: {}
            k8sContainerMemoryCache: {}
            k8sContainerMemoryRss: {}
            k8sContainerMemorySwap: {}
            k8sContainerResource: {}
            k8sPodOwner: {}
            kubeApiserverAvailability: {}
            kubeApiserverBurnrate: {}
            kubeApiserverHistogram: {}
            kubeApiserverSlos: {}
            kubeControllerManager: {}
            kubelet: {}
            kubeProxy: {}
            kubePrometheusGeneral: {}
            kubePrometheusNodeRecording: {}
            kubernetesApps: {}
            kubernetesResources: {}
            kubernetesStorage: {}
            kubernetesSystem: {}
            kubeSchedulerAlerting: {}
            kubeSchedulerRecording: {}
            kubeStateMetrics: {}
            network: {}
            node: {}
            nodeExporterAlerting: {}
            nodeExporterRecording: {}
            prometheus: {}
            prometheusOperator: {}

          ## Additional annotations for specific PrometheusRule alerts groups
          additionalRuleGroupAnnotations:
            alertmanager: {}
            etcd: {}
            configReloaders: {}
            general: {}
            k8sContainerCpuUsageSecondsTotal: {}
            k8sContainerMemoryCache: {}
            k8sContainerMemoryRss: {}
            k8sContainerMemorySwap: {}
            k8sContainerResource: {}
            k8sPodOwner: {}
            kubeApiserverAvailability: {}
            kubeApiserverBurnrate: {}
            kubeApiserverHistogram: {}
            kubeApiserverSlos: {}
            kubeControllerManager: {}
            kubelet: {}
            kubeProxy: {}
            kubePrometheusGeneral: {}
            kubePrometheusNodeRecording: {}
            kubernetesApps: {}
            kubernetesResources: {}
            kubernetesStorage: {}
            kubernetesSystem: {}
            kubeSchedulerAlerting: {}
            kubeSchedulerRecording: {}
            kubeStateMetrics: {}
            network: {}
            node: {}
            nodeExporterAlerting: {}
            nodeExporterRecording: {}
            prometheus: {}
            prometheusOperator: {}

        global:
          rbac:
            create: true

        ## Configuration for alertmanager
        ## ref: https://prometheus.io/docs/alerting/alertmanager/
        alertmanager:
          enabled: true
          config:
            global:
              resolve_timeout: 5m
            inhibit_rules:
              - source_matchers:
                  - "severity = critical"
                target_matchers:
                  - "severity =~ warning|info"
                equal:
                  - "namespace"
                  - "alertname"
              - source_matchers:
                  - "severity = warning"
                target_matchers:
                  - "severity = info"
                equal:
                  - "namespace"
                  - "alertname"
              - source_matchers:
                  - "alertname = InfoInhibitor"
                target_matchers:
                  - "severity = info"
                equal:
                  - "namespace"
              - target_matchers:
                  - "alertname = InfoInhibitor"
            route:
              group_by: ["namespace"]
              group_wait: 30s
              group_interval: 5m
              repeat_interval: 12h
              receiver: "null"
              routes:
                - receiver: "null"
                  matchers:
                    - alertname = "Watchdog"
            receivers:
              - name: "null"
            templates:
              - "/etc/alertmanager/config/*.tmpl"

          ingress:
            enabled: true
            ingressClassName: nginx
            annotations: {}
            hosts:
              - alertmanager.70ld.home
            paths:
              - /

          ## Configuration for Alertmanager service
          service:
            annotations: {}
            labels: {}
            ipDualStack:
              enabled: false
              ipFamilies: ["IPv6", "IPv4"]
              ipFamilyPolicy: "PreferDualStack"
            port: 9093
            targetPort: 9093
            type: ClusterIP

          ## Configuration for creating a ServiceMonitor for AlertManager
          serviceMonitor:
            selfMonitor: true

        ## Using default values from https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
        grafana:
          defaultDashboardsEditable: true
          adminPassword: password
          ingress:
            enabled: true
            ingressClassName: nginx
            annotations: {}
            hosts:
              - grafana.70ld.home
            path: /
          persistence:
            enabled: true
            type: sts
            accessModes:
              - ReadWriteOnce
            size: 10Gi
            finalizers:
              - kubernetes.io/pvc-protection

        ## Component scraping the kube api server
        kubeApiServer:
          enabled: true
          tlsConfig:
            serverName: kubernetes
            insecureSkipVerify: false

        kubelet:
          enabled: true
          namespace: kube-system

        kubeControllerManager:
          enabled: true

        coreDns:
          enabled: true

        kubeEtcd:
          enabled: true

        kubeScheduler:
          enabled: true

        kubeProxy:
          enabled: true

        kubeStateMetrics:
          enabled: true

        ## Deploy node exporter as a daemonset to all nodes
        nodeExporter:
          enabled: true
          operatingSystems:
            linux:
              enabled: true
            darwin:
              enabled: true

        ## Manages Prometheus and Alertmanager components
        prometheusOperator:
          enabled: true

          admissionWebhooks:
            annotations: {}

            mutatingWebhookConfiguration:
              annotations: {}

            validatingWebhookConfiguration:
              annotations: {}

            deployment:
              enabled: false

        ## Deploy a Prometheus instance
        prometheus:
          enabled: true
          annotations: {}

          ## Configuration for Prometheus service
          service:
            type: LoadBalancer

          ingress:
            enabled: true
            ingressClassName: nginx
            hosts:
              - prometheus.70ld.home
            paths:
              - /

          prometheusSpec:
            podMonitorSelectorNilUsesHelmValues: false
            serviceMonitorSelectorNilUsesHelmValues: false
            ruleSelectorNilUsesHelmValues: false
            probeSelectorNilUsesHelmValues: false

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true

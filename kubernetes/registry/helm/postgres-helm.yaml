apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: postgres
  namespace: argocd
spec:
  destination:
    server: "https://kubernetes.default.svc"
    namespace: postgres
  project: k3s
  source:
    chart: postgresql
    repoURL: https://charts.bitnami.com/bitnami
    targetRevision: 15.5.17
    helm:
      valuesObject:
        # Global parameters
        global:
          defaultStorageClass: longhorn

        # Auth parameters
        auth:
          enablePostgresUser: true
          postgresPassword: password
          username: postgres
          password: password
          database: postgres

          replicationUsername: repl_user
          replicationPassword: password

        architecture: standalone
        replication:
          synchronousCommit: "on"
          numSynchronousReplicas: 1

        # Primary parameters
        primary:
          name: primary

          livenessProbe:
            enabled: true
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1

          readinessProbe:
            enabled: true
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1

          resourcesPreset: micro
          updateStrategy:
            type: RollingUpdate

          service:
            type: LoadBalancer
            ports:
              postgresql: 5432
            annotations:
              kube-vip.io/loadbalancerIPs: 192.168.5.58

          persistence:
            enabled: true
            volumeName: data
            mountPath: /bitnami/postgresql
            storageClass: longhorn
            accessMode:
              - ReadWriteOnce
            size: 8Gi

        # readReplicas parameters
        readReplicas:
          name: read
          replicaCount: 1

          livenessProbe:
            enabled: true
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1

          readinessProbe:
            enabled: true
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1

          resourcesPreset: micro

          updateStrategy:
            type: RollingUpdate

          service:
            type: LoadBalancer
            ports:
              postgresql: 5432
            annotations:
              kube-vip.io/loadbalancerIPs: 192.168.5.59

          persistence:
            enabled: true
            mountPath: /bitnami/postgresql
            storageClass: longhorn
            accessMode:
              - ReadWriteOnce
            size: 8Gi

        # Backup parameters
        backup:
          enabled: true
          cronjob:
            schedule: "@daily"
            timeZone: GMT
            restartPolicy: OnFailure
            command:
              - /bin/sh
              - -c
              - "pg_dumpall --clean --if-exists --load-via-partition-root --quote-all-identifiers --no-password --file=${PGDUMP_DIR}/pg_dumpall-$(date '+%Y-%m-%d-%H-%M').pgdump"
            resourcesPreset: nano
            storage:
              enabled: true
              storageClass: longhorn
              accessModes:
                - ReadWriteOnce
              size: 8Gi
              mountPath: /backup/pgdump

        # Metric exporter parameters
        metrics:
          enabled: true
          image:
            registry: docker.io
            repository: bitnami/postgres-exporter
            tag: 0.15.0-debian-12-r43
            digest: ""
            pullPolicy: IfNotPresent

          resourcesPreset: nano
          service:
            ports:
              metrics: 9187
              annotations:
                prometheus.io/scrape: "true"
                prometheus.io/port: "{{ .Values.metrics.service.ports.metrics }}"

          serviceMonitor:
            enabled: true
            namespace: monitoring
            interval: 30s

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
